#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.235
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="UNOIT")]
	public partial class DALDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertAdministrators(Administrators instance);
    partial void UpdateAdministrators(Administrators instance);
    partial void DeleteAdministrators(Administrators instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertCatagory(Catagory instance);
    partial void UpdateCatagory(Catagory instance);
    partial void DeleteCatagory(Catagory instance);
    partial void InsertEntry(Entry instance);
    partial void UpdateEntry(Entry instance);
    partial void DeleteEntry(Entry instance);
    partial void InsertEntryKeywordMenu(EntryKeywordMenu instance);
    partial void UpdateEntryKeywordMenu(EntryKeywordMenu instance);
    partial void DeleteEntryKeywordMenu(EntryKeywordMenu instance);
    partial void InsertEntryToBeVerified(EntryToBeVerified instance);
    partial void UpdateEntryToBeVerified(EntryToBeVerified instance);
    partial void DeleteEntryToBeVerified(EntryToBeVerified instance);
    partial void InsertEvaluation(Evaluation instance);
    partial void UpdateEvaluation(Evaluation instance);
    partial void DeleteEvaluation(Evaluation instance);
    partial void InsertKeywords(Keywords instance);
    partial void UpdateKeywords(Keywords instance);
    partial void DeleteKeywords(Keywords instance);
    partial void InsertNotify(Notify instance);
    partial void UpdateNotify(Notify instance);
    partial void DeleteNotify(Notify instance);
    partial void InsertProsecution(Prosecution instance);
    partial void UpdateProsecution(Prosecution instance);
    partial void DeleteProsecution(Prosecution instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertEntryModifiedHistory(EntryModifiedHistory instance);
    partial void UpdateEntryModifiedHistory(EntryModifiedHistory instance);
    partial void DeleteEntryModifiedHistory(EntryModifiedHistory instance);
    #endregion
		
		public DALDataContext() : 
				base(global::DAL.Properties.Settings.Default.UNOITConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Administrators> Administrators
		{
			get
			{
				return this.GetTable<Administrators>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comment
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Catagory> Catagory
		{
			get
			{
				return this.GetTable<Catagory>();
			}
		}
		
		public System.Data.Linq.Table<Entry> Entry
		{
			get
			{
				return this.GetTable<Entry>();
			}
		}
		
		public System.Data.Linq.Table<EntryKeywordMenu> EntryKeywordMenu
		{
			get
			{
				return this.GetTable<EntryKeywordMenu>();
			}
		}
		
		public System.Data.Linq.Table<EntryToBeVerified> EntryToBeVerified
		{
			get
			{
				return this.GetTable<EntryToBeVerified>();
			}
		}
		
		public System.Data.Linq.Table<Evaluation> Evaluation
		{
			get
			{
				return this.GetTable<Evaluation>();
			}
		}
		
		public System.Data.Linq.Table<Keywords> Keywords
		{
			get
			{
				return this.GetTable<Keywords>();
			}
		}
		
		public System.Data.Linq.Table<Notify> Notify
		{
			get
			{
				return this.GetTable<Notify>();
			}
		}
		
		public System.Data.Linq.Table<Prosecution> Prosecution
		{
			get
			{
				return this.GetTable<Prosecution>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<Message> Message
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<EntryModifiedHistory> EntryModifiedHistory
		{
			get
			{
				return this.GetTable<EntryModifiedHistory>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Administrators")]
	public partial class Administrators : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdministratorID;
		
		private string _AdministratorName;
		
		private string _Password;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdministratorIDChanging(int value);
    partial void OnAdministratorIDChanged();
    partial void OnAdministratorNameChanging(string value);
    partial void OnAdministratorNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Administrators()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdministratorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AdministratorID
		{
			get
			{
				return this._AdministratorID;
			}
			set
			{
				if ((this._AdministratorID != value))
				{
					this.OnAdministratorIDChanging(value);
					this.SendPropertyChanging();
					this._AdministratorID = value;
					this.SendPropertyChanged("AdministratorID");
					this.OnAdministratorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdministratorName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string AdministratorName
		{
			get
			{
				return this._AdministratorName;
			}
			set
			{
				if ((this._AdministratorName != value))
				{
					this.OnAdministratorNameChanging(value);
					this.SendPropertyChanging();
					this._AdministratorName = value;
					this.SendPropertyChanged("AdministratorName");
					this.OnAdministratorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentID;
		
		private int _UserID;
		
		private int _EntryID;
		
		private System.DateTime _CommentTime;
		
		private string _CommentContents;
		
		private EntityRef<Entry> _Entry;
		
		private EntityRef<Users> _Users;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnEntryIDChanging(int value);
    partial void OnEntryIDChanged();
    partial void OnCommentTimeChanging(System.DateTime value);
    partial void OnCommentTimeChanged();
    partial void OnCommentContentsChanging(string value);
    partial void OnCommentContentsChanged();
    #endregion
		
		public Comment()
		{
			this._Entry = default(EntityRef<Entry>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryID", DbType="Int NOT NULL")]
		public int EntryID
		{
			get
			{
				return this._EntryID;
			}
			set
			{
				if ((this._EntryID != value))
				{
					if (this._Entry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntryIDChanging(value);
					this.SendPropertyChanging();
					this._EntryID = value;
					this.SendPropertyChanged("EntryID");
					this.OnEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentTime", DbType="DateTime NOT NULL")]
		public System.DateTime CommentTime
		{
			get
			{
				return this._CommentTime;
			}
			set
			{
				if ((this._CommentTime != value))
				{
					this.OnCommentTimeChanging(value);
					this.SendPropertyChanging();
					this._CommentTime = value;
					this.SendPropertyChanged("CommentTime");
					this.OnCommentTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentContents", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CommentContents
		{
			get
			{
				return this._CommentContents;
			}
			set
			{
				if ((this._CommentContents != value))
				{
					this.OnCommentContentsChanging(value);
					this.SendPropertyChanging();
					this._CommentContents = value;
					this.SendPropertyChanged("CommentContents");
					this.OnCommentContentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_Comment", Storage="_Entry", ThisKey="EntryID", OtherKey="EntryID", IsForeignKey=true)]
		public Entry Entry
		{
			get
			{
				return this._Entry.Entity;
			}
			set
			{
				Entry previousValue = this._Entry.Entity;
				if (((previousValue != value) 
							|| (this._Entry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entry.Entity = null;
						previousValue.Comment.Remove(this);
					}
					this._Entry.Entity = value;
					if ((value != null))
					{
						value.Comment.Add(this);
						this._EntryID = value.EntryID;
					}
					else
					{
						this._EntryID = default(int);
					}
					this.SendPropertyChanged("Entry");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Comment", Storage="_Users", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Comment.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Comment.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Catagory")]
	public partial class Catagory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CatagoryID;
		
		private string _CatagoryName;
		
		private System.Nullable<int> _UpperCatagoryID;
		
		private EntitySet<Entry> _Entry;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatagoryIDChanging(int value);
    partial void OnCatagoryIDChanged();
    partial void OnCatagoryNameChanging(string value);
    partial void OnCatagoryNameChanged();
    partial void OnUpperCatagoryIDChanging(System.Nullable<int> value);
    partial void OnUpperCatagoryIDChanged();
    #endregion
		
		public Catagory()
		{
			this._Entry = new EntitySet<Entry>(new Action<Entry>(this.attach_Entry), new Action<Entry>(this.detach_Entry));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatagoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CatagoryID
		{
			get
			{
				return this._CatagoryID;
			}
			set
			{
				if ((this._CatagoryID != value))
				{
					this.OnCatagoryIDChanging(value);
					this.SendPropertyChanging();
					this._CatagoryID = value;
					this.SendPropertyChanged("CatagoryID");
					this.OnCatagoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatagoryName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string CatagoryName
		{
			get
			{
				return this._CatagoryName;
			}
			set
			{
				if ((this._CatagoryName != value))
				{
					this.OnCatagoryNameChanging(value);
					this.SendPropertyChanging();
					this._CatagoryName = value;
					this.SendPropertyChanged("CatagoryName");
					this.OnCatagoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpperCatagoryID", DbType="Int")]
		public System.Nullable<int> UpperCatagoryID
		{
			get
			{
				return this._UpperCatagoryID;
			}
			set
			{
				if ((this._UpperCatagoryID != value))
				{
					this.OnUpperCatagoryIDChanging(value);
					this.SendPropertyChanging();
					this._UpperCatagoryID = value;
					this.SendPropertyChanged("UpperCatagoryID");
					this.OnUpperCatagoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Catagory_Entry", Storage="_Entry", ThisKey="CatagoryID", OtherKey="CategoryID")]
		public EntitySet<Entry> Entry
		{
			get
			{
				return this._Entry;
			}
			set
			{
				this._Entry.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Entry(Entry entity)
		{
			this.SendPropertyChanging();
			entity.Catagory = this;
		}
		
		private void detach_Entry(Entry entity)
		{
			this.SendPropertyChanging();
			entity.Catagory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Entry")]
	public partial class Entry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntryID;
		
		private string _EntryName;
		
		private int _UserID;
		
		private string _Contents;
		
		private System.Nullable<int> _CategoryID;
		
		private System.DateTime _ReleasedTime;
		
		private System.Nullable<System.DateTime> _LastModifiedTime;
		
		private string _EntrySource;
		
		private System.Nullable<int> _ClickSum;
		
		private System.Nullable<int> _DigSum;
		
		private System.Nullable<int> _UpSum;
		
		private EntitySet<Comment> _Comment;
		
		private EntitySet<EntryKeywordMenu> _EntryKeywordMenu;
		
		private EntitySet<Evaluation> _Evaluation;
		
		private EntitySet<EntryModifiedHistory> _EntryModifiedHistory;
		
		private EntityRef<Catagory> _Catagory;
		
		private EntityRef<Users> _Users;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntryIDChanging(int value);
    partial void OnEntryIDChanged();
    partial void OnEntryNameChanging(string value);
    partial void OnEntryNameChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnReleasedTimeChanging(System.DateTime value);
    partial void OnReleasedTimeChanged();
    partial void OnLastModifiedTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedTimeChanged();
    partial void OnEntrySourceChanging(string value);
    partial void OnEntrySourceChanged();
    partial void OnClickSumChanging(System.Nullable<int> value);
    partial void OnClickSumChanged();
    partial void OnDigSumChanging(System.Nullable<int> value);
    partial void OnDigSumChanged();
    partial void OnUpSumChanging(System.Nullable<int> value);
    partial void OnUpSumChanged();
    #endregion
		
		public Entry()
		{
			this._Comment = new EntitySet<Comment>(new Action<Comment>(this.attach_Comment), new Action<Comment>(this.detach_Comment));
			this._EntryKeywordMenu = new EntitySet<EntryKeywordMenu>(new Action<EntryKeywordMenu>(this.attach_EntryKeywordMenu), new Action<EntryKeywordMenu>(this.detach_EntryKeywordMenu));
			this._Evaluation = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluation), new Action<Evaluation>(this.detach_Evaluation));
			this._EntryModifiedHistory = new EntitySet<EntryModifiedHistory>(new Action<EntryModifiedHistory>(this.attach_EntryModifiedHistory), new Action<EntryModifiedHistory>(this.detach_EntryModifiedHistory));
			this._Catagory = default(EntityRef<Catagory>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EntryID
		{
			get
			{
				return this._EntryID;
			}
			set
			{
				if ((this._EntryID != value))
				{
					this.OnEntryIDChanging(value);
					this.SendPropertyChanging();
					this._EntryID = value;
					this.SendPropertyChanged("EntryID");
					this.OnEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string EntryName
		{
			get
			{
				return this._EntryName;
			}
			set
			{
				if ((this._EntryName != value))
				{
					this.OnEntryNameChanging(value);
					this.SendPropertyChanging();
					this._EntryName = value;
					this.SendPropertyChanged("EntryName");
					this.OnEntryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contents", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Catagory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleasedTime", DbType="DateTime NOT NULL")]
		public System.DateTime ReleasedTime
		{
			get
			{
				return this._ReleasedTime;
			}
			set
			{
				if ((this._ReleasedTime != value))
				{
					this.OnReleasedTimeChanging(value);
					this.SendPropertyChanging();
					this._ReleasedTime = value;
					this.SendPropertyChanged("ReleasedTime");
					this.OnReleasedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedTime
		{
			get
			{
				return this._LastModifiedTime;
			}
			set
			{
				if ((this._LastModifiedTime != value))
				{
					this.OnLastModifiedTimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedTime = value;
					this.SendPropertyChanged("LastModifiedTime");
					this.OnLastModifiedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntrySource", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string EntrySource
		{
			get
			{
				return this._EntrySource;
			}
			set
			{
				if ((this._EntrySource != value))
				{
					this.OnEntrySourceChanging(value);
					this.SendPropertyChanging();
					this._EntrySource = value;
					this.SendPropertyChanged("EntrySource");
					this.OnEntrySourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClickSum", DbType="Int")]
		public System.Nullable<int> ClickSum
		{
			get
			{
				return this._ClickSum;
			}
			set
			{
				if ((this._ClickSum != value))
				{
					this.OnClickSumChanging(value);
					this.SendPropertyChanging();
					this._ClickSum = value;
					this.SendPropertyChanged("ClickSum");
					this.OnClickSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DigSum", DbType="Int")]
		public System.Nullable<int> DigSum
		{
			get
			{
				return this._DigSum;
			}
			set
			{
				if ((this._DigSum != value))
				{
					this.OnDigSumChanging(value);
					this.SendPropertyChanging();
					this._DigSum = value;
					this.SendPropertyChanged("DigSum");
					this.OnDigSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpSum", DbType="Int")]
		public System.Nullable<int> UpSum
		{
			get
			{
				return this._UpSum;
			}
			set
			{
				if ((this._UpSum != value))
				{
					this.OnUpSumChanging(value);
					this.SendPropertyChanging();
					this._UpSum = value;
					this.SendPropertyChanged("UpSum");
					this.OnUpSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_Comment", Storage="_Comment", ThisKey="EntryID", OtherKey="EntryID")]
		public EntitySet<Comment> Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				this._Comment.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_EntryKeywordMenu", Storage="_EntryKeywordMenu", ThisKey="EntryID", OtherKey="EntryID")]
		public EntitySet<EntryKeywordMenu> EntryKeywordMenu
		{
			get
			{
				return this._EntryKeywordMenu;
			}
			set
			{
				this._EntryKeywordMenu.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_Evaluation", Storage="_Evaluation", ThisKey="EntryID", OtherKey="EntryID")]
		public EntitySet<Evaluation> Evaluation
		{
			get
			{
				return this._Evaluation;
			}
			set
			{
				this._Evaluation.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_EntryModifiedHistory", Storage="_EntryModifiedHistory", ThisKey="EntryID", OtherKey="EntryID")]
		public EntitySet<EntryModifiedHistory> EntryModifiedHistory
		{
			get
			{
				return this._EntryModifiedHistory;
			}
			set
			{
				this._EntryModifiedHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Catagory_Entry", Storage="_Catagory", ThisKey="CategoryID", OtherKey="CatagoryID", IsForeignKey=true)]
		public Catagory Catagory
		{
			get
			{
				return this._Catagory.Entity;
			}
			set
			{
				Catagory previousValue = this._Catagory.Entity;
				if (((previousValue != value) 
							|| (this._Catagory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Catagory.Entity = null;
						previousValue.Entry.Remove(this);
					}
					this._Catagory.Entity = value;
					if ((value != null))
					{
						value.Entry.Add(this);
						this._CategoryID = value.CatagoryID;
					}
					else
					{
						this._CategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Catagory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Entry", Storage="_Users", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Entry.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Entry.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comment(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Entry = this;
		}
		
		private void detach_Comment(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Entry = null;
		}
		
		private void attach_EntryKeywordMenu(EntryKeywordMenu entity)
		{
			this.SendPropertyChanging();
			entity.Entry = this;
		}
		
		private void detach_EntryKeywordMenu(EntryKeywordMenu entity)
		{
			this.SendPropertyChanging();
			entity.Entry = null;
		}
		
		private void attach_Evaluation(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Entry = this;
		}
		
		private void detach_Evaluation(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Entry = null;
		}
		
		private void attach_EntryModifiedHistory(EntryModifiedHistory entity)
		{
			this.SendPropertyChanging();
			entity.Entry = this;
		}
		
		private void detach_EntryModifiedHistory(EntryModifiedHistory entity)
		{
			this.SendPropertyChanging();
			entity.Entry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntryKeywordMenu")]
	public partial class EntryKeywordMenu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MenuID;
		
		private int _EntryID;
		
		private int _KeywordID;
		
		private EntityRef<Entry> _Entry;
		
		private EntityRef<Keywords> _Keywords;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuIDChanging(int value);
    partial void OnMenuIDChanged();
    partial void OnEntryIDChanging(int value);
    partial void OnEntryIDChanged();
    partial void OnKeywordIDChanging(int value);
    partial void OnKeywordIDChanged();
    #endregion
		
		public EntryKeywordMenu()
		{
			this._Entry = default(EntityRef<Entry>);
			this._Keywords = default(EntityRef<Keywords>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					this.OnMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MenuID = value;
					this.SendPropertyChanged("MenuID");
					this.OnMenuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryID", DbType="Int NOT NULL")]
		public int EntryID
		{
			get
			{
				return this._EntryID;
			}
			set
			{
				if ((this._EntryID != value))
				{
					if (this._Entry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntryIDChanging(value);
					this.SendPropertyChanging();
					this._EntryID = value;
					this.SendPropertyChanged("EntryID");
					this.OnEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeywordID", DbType="Int NOT NULL")]
		public int KeywordID
		{
			get
			{
				return this._KeywordID;
			}
			set
			{
				if ((this._KeywordID != value))
				{
					if (this._Keywords.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKeywordIDChanging(value);
					this.SendPropertyChanging();
					this._KeywordID = value;
					this.SendPropertyChanged("KeywordID");
					this.OnKeywordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_EntryKeywordMenu", Storage="_Entry", ThisKey="EntryID", OtherKey="EntryID", IsForeignKey=true)]
		public Entry Entry
		{
			get
			{
				return this._Entry.Entity;
			}
			set
			{
				Entry previousValue = this._Entry.Entity;
				if (((previousValue != value) 
							|| (this._Entry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entry.Entity = null;
						previousValue.EntryKeywordMenu.Remove(this);
					}
					this._Entry.Entity = value;
					if ((value != null))
					{
						value.EntryKeywordMenu.Add(this);
						this._EntryID = value.EntryID;
					}
					else
					{
						this._EntryID = default(int);
					}
					this.SendPropertyChanged("Entry");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Keywords_EntryKeywordMenu", Storage="_Keywords", ThisKey="KeywordID", OtherKey="KeywordID", IsForeignKey=true)]
		public Keywords Keywords
		{
			get
			{
				return this._Keywords.Entity;
			}
			set
			{
				Keywords previousValue = this._Keywords.Entity;
				if (((previousValue != value) 
							|| (this._Keywords.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Keywords.Entity = null;
						previousValue.EntryKeywordMenu.Remove(this);
					}
					this._Keywords.Entity = value;
					if ((value != null))
					{
						value.EntryKeywordMenu.Add(this);
						this._KeywordID = value.KeywordID;
					}
					else
					{
						this._KeywordID = default(int);
					}
					this.SendPropertyChanged("Keywords");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntryToBeVerified")]
	public partial class EntryToBeVerified : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntryID;
		
		private string _EntryName;
		
		private int _UserID;
		
		private string _Contents;
		
		private int _CatagoryID;
		
		private System.DateTime _ReleaseTime;
		
		private string _EntrySource;
		
		private EntityRef<Users> _Users;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntryIDChanging(int value);
    partial void OnEntryIDChanged();
    partial void OnEntryNameChanging(string value);
    partial void OnEntryNameChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnCatagoryIDChanging(int value);
    partial void OnCatagoryIDChanged();
    partial void OnReleaseTimeChanging(System.DateTime value);
    partial void OnReleaseTimeChanged();
    partial void OnEntrySourceChanging(string value);
    partial void OnEntrySourceChanged();
    #endregion
		
		public EntryToBeVerified()
		{
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EntryID
		{
			get
			{
				return this._EntryID;
			}
			set
			{
				if ((this._EntryID != value))
				{
					this.OnEntryIDChanging(value);
					this.SendPropertyChanging();
					this._EntryID = value;
					this.SendPropertyChanged("EntryID");
					this.OnEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string EntryName
		{
			get
			{
				return this._EntryName;
			}
			set
			{
				if ((this._EntryName != value))
				{
					this.OnEntryNameChanging(value);
					this.SendPropertyChanging();
					this._EntryName = value;
					this.SendPropertyChanged("EntryName");
					this.OnEntryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contents", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatagoryID", DbType="Int NOT NULL")]
		public int CatagoryID
		{
			get
			{
				return this._CatagoryID;
			}
			set
			{
				if ((this._CatagoryID != value))
				{
					this.OnCatagoryIDChanging(value);
					this.SendPropertyChanging();
					this._CatagoryID = value;
					this.SendPropertyChanged("CatagoryID");
					this.OnCatagoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleaseTime", DbType="DateTime NOT NULL")]
		public System.DateTime ReleaseTime
		{
			get
			{
				return this._ReleaseTime;
			}
			set
			{
				if ((this._ReleaseTime != value))
				{
					this.OnReleaseTimeChanging(value);
					this.SendPropertyChanging();
					this._ReleaseTime = value;
					this.SendPropertyChanged("ReleaseTime");
					this.OnReleaseTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntrySource", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string EntrySource
		{
			get
			{
				return this._EntrySource;
			}
			set
			{
				if ((this._EntrySource != value))
				{
					this.OnEntrySourceChanging(value);
					this.SendPropertyChanging();
					this._EntrySource = value;
					this.SendPropertyChanged("EntrySource");
					this.OnEntrySourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_EntryToBeVerified", Storage="_Users", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.EntryToBeVerified.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.EntryToBeVerified.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Evaluation")]
	public partial class Evaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EvaluationID;
		
		private int _EntryID;
		
		private int _UserID;
		
		private System.DateTime _EvaluateTime;
		
		private EntityRef<Entry> _Entry;
		
		private EntityRef<Users> _Users;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEvaluationIDChanging(int value);
    partial void OnEvaluationIDChanged();
    partial void OnEntryIDChanging(int value);
    partial void OnEntryIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnEvaluateTimeChanging(System.DateTime value);
    partial void OnEvaluateTimeChanged();
    #endregion
		
		public Evaluation()
		{
			this._Entry = default(EntityRef<Entry>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EvaluationID
		{
			get
			{
				return this._EvaluationID;
			}
			set
			{
				if ((this._EvaluationID != value))
				{
					this.OnEvaluationIDChanging(value);
					this.SendPropertyChanging();
					this._EvaluationID = value;
					this.SendPropertyChanged("EvaluationID");
					this.OnEvaluationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryID", DbType="Int NOT NULL")]
		public int EntryID
		{
			get
			{
				return this._EntryID;
			}
			set
			{
				if ((this._EntryID != value))
				{
					if (this._Entry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntryIDChanging(value);
					this.SendPropertyChanging();
					this._EntryID = value;
					this.SendPropertyChanged("EntryID");
					this.OnEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluateTime", DbType="DateTime NOT NULL")]
		public System.DateTime EvaluateTime
		{
			get
			{
				return this._EvaluateTime;
			}
			set
			{
				if ((this._EvaluateTime != value))
				{
					this.OnEvaluateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvaluateTime = value;
					this.SendPropertyChanged("EvaluateTime");
					this.OnEvaluateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_Evaluation", Storage="_Entry", ThisKey="EntryID", OtherKey="EntryID", IsForeignKey=true)]
		public Entry Entry
		{
			get
			{
				return this._Entry.Entity;
			}
			set
			{
				Entry previousValue = this._Entry.Entity;
				if (((previousValue != value) 
							|| (this._Entry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entry.Entity = null;
						previousValue.Evaluation.Remove(this);
					}
					this._Entry.Entity = value;
					if ((value != null))
					{
						value.Evaluation.Add(this);
						this._EntryID = value.EntryID;
					}
					else
					{
						this._EntryID = default(int);
					}
					this.SendPropertyChanged("Entry");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Evaluation", Storage="_Users", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Evaluation.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Evaluation.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Keywords")]
	public partial class Keywords : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KeywordID;
		
		private string _KeywordName;
		
		private EntitySet<EntryKeywordMenu> _EntryKeywordMenu;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeywordIDChanging(int value);
    partial void OnKeywordIDChanged();
    partial void OnKeywordNameChanging(string value);
    partial void OnKeywordNameChanged();
    #endregion
		
		public Keywords()
		{
			this._EntryKeywordMenu = new EntitySet<EntryKeywordMenu>(new Action<EntryKeywordMenu>(this.attach_EntryKeywordMenu), new Action<EntryKeywordMenu>(this.detach_EntryKeywordMenu));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeywordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int KeywordID
		{
			get
			{
				return this._KeywordID;
			}
			set
			{
				if ((this._KeywordID != value))
				{
					this.OnKeywordIDChanging(value);
					this.SendPropertyChanging();
					this._KeywordID = value;
					this.SendPropertyChanged("KeywordID");
					this.OnKeywordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeywordName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string KeywordName
		{
			get
			{
				return this._KeywordName;
			}
			set
			{
				if ((this._KeywordName != value))
				{
					this.OnKeywordNameChanging(value);
					this.SendPropertyChanging();
					this._KeywordName = value;
					this.SendPropertyChanged("KeywordName");
					this.OnKeywordNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Keywords_EntryKeywordMenu", Storage="_EntryKeywordMenu", ThisKey="KeywordID", OtherKey="KeywordID")]
		public EntitySet<EntryKeywordMenu> EntryKeywordMenu
		{
			get
			{
				return this._EntryKeywordMenu;
			}
			set
			{
				this._EntryKeywordMenu.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EntryKeywordMenu(EntryKeywordMenu entity)
		{
			this.SendPropertyChanging();
			entity.Keywords = this;
		}
		
		private void detach_EntryKeywordMenu(EntryKeywordMenu entity)
		{
			this.SendPropertyChanging();
			entity.Keywords = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notify")]
	public partial class Notify : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NotifyID;
		
		private int _UserID;
		
		private System.DateTime _NotifyTime;
		
		private string _NotifyContents;
		
		private EntityRef<Users> _Users;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotifyIDChanging(int value);
    partial void OnNotifyIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNotifyTimeChanging(System.DateTime value);
    partial void OnNotifyTimeChanged();
    partial void OnNotifyContentsChanging(string value);
    partial void OnNotifyContentsChanged();
    #endregion
		
		public Notify()
		{
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotifyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NotifyID
		{
			get
			{
				return this._NotifyID;
			}
			set
			{
				if ((this._NotifyID != value))
				{
					this.OnNotifyIDChanging(value);
					this.SendPropertyChanging();
					this._NotifyID = value;
					this.SendPropertyChanged("NotifyID");
					this.OnNotifyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotifyTime", DbType="DateTime NOT NULL")]
		public System.DateTime NotifyTime
		{
			get
			{
				return this._NotifyTime;
			}
			set
			{
				if ((this._NotifyTime != value))
				{
					this.OnNotifyTimeChanging(value);
					this.SendPropertyChanging();
					this._NotifyTime = value;
					this.SendPropertyChanged("NotifyTime");
					this.OnNotifyTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotifyContents", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string NotifyContents
		{
			get
			{
				return this._NotifyContents;
			}
			set
			{
				if ((this._NotifyContents != value))
				{
					this.OnNotifyContentsChanging(value);
					this.SendPropertyChanging();
					this._NotifyContents = value;
					this.SendPropertyChanged("NotifyContents");
					this.OnNotifyContentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Notify", Storage="_Users", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Notify.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Notify.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prosecution")]
	public partial class Prosecution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProsecutionID;
		
		private int _UserID;
		
		private int _IsEntry;
		
		private int _ID;
		
		private System.DateTime _ProsecutionTime;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProsecutionIDChanging(int value);
    partial void OnProsecutionIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsEntryChanging(int value);
    partial void OnIsEntryChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProsecutionTimeChanging(System.DateTime value);
    partial void OnProsecutionTimeChanged();
    #endregion
		
		public Prosecution()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProsecutionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProsecutionID
		{
			get
			{
				return this._ProsecutionID;
			}
			set
			{
				if ((this._ProsecutionID != value))
				{
					this.OnProsecutionIDChanging(value);
					this.SendPropertyChanging();
					this._ProsecutionID = value;
					this.SendPropertyChanged("ProsecutionID");
					this.OnProsecutionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEntry", DbType="Int NOT NULL")]
		public int IsEntry
		{
			get
			{
				return this._IsEntry;
			}
			set
			{
				if ((this._IsEntry != value))
				{
					this.OnIsEntryChanging(value);
					this.SendPropertyChanging();
					this._IsEntry = value;
					this.SendPropertyChanged("IsEntry");
					this.OnIsEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProsecutionTime", DbType="DateTime NOT NULL")]
		public System.DateTime ProsecutionTime
		{
			get
			{
				return this._ProsecutionTime;
			}
			set
			{
				if ((this._ProsecutionTime != value))
				{
					this.OnProsecutionTimeChanging(value);
					this.SendPropertyChanging();
					this._ProsecutionTime = value;
					this.SendPropertyChanged("ProsecutionTime");
					this.OnProsecutionTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserName;
		
		private int _Gender;
		
		private string _City;
		
		private string _Province;
		
		private System.DateTime _Birthdate;
		
		private string _Password;
		
		private System.Nullable<int> _Score;
		
		private System.Nullable<int> _IllegalCounts;
		
		private byte _IsActivated;
		
		private int _PasswordErrorCounts;
		
		private System.Nullable<System.DateTime> _FrozenTime;
		
		private string _PhotoUrl;
		
		private string _SkilledField;
		
		private string _Email;
		
		private string _Position;
		
		private EntitySet<Comment> _Comment;
		
		private EntitySet<Entry> _Entry;
		
		private EntitySet<EntryToBeVerified> _EntryToBeVerified;
		
		private EntitySet<Evaluation> _Evaluation;
		
		private EntitySet<Notify> _Notify;
		
		private EntitySet<EntryModifiedHistory> _EntryModifiedHistory;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnGenderChanging(int value);
    partial void OnGenderChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnBirthdateChanging(System.DateTime value);
    partial void OnBirthdateChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnScoreChanging(System.Nullable<int> value);
    partial void OnScoreChanged();
    partial void OnIllegalCountsChanging(System.Nullable<int> value);
    partial void OnIllegalCountsChanged();
    partial void OnIsActivatedChanging(byte value);
    partial void OnIsActivatedChanged();
    partial void OnPasswordErrorCountsChanging(int value);
    partial void OnPasswordErrorCountsChanged();
    partial void OnFrozenTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnFrozenTimeChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnSkilledFieldChanging(string value);
    partial void OnSkilledFieldChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    #endregion
		
		public Users()
		{
			this._Comment = new EntitySet<Comment>(new Action<Comment>(this.attach_Comment), new Action<Comment>(this.detach_Comment));
			this._Entry = new EntitySet<Entry>(new Action<Entry>(this.attach_Entry), new Action<Entry>(this.detach_Entry));
			this._EntryToBeVerified = new EntitySet<EntryToBeVerified>(new Action<EntryToBeVerified>(this.attach_EntryToBeVerified), new Action<EntryToBeVerified>(this.detach_EntryToBeVerified));
			this._Evaluation = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluation), new Action<Evaluation>(this.detach_Evaluation));
			this._Notify = new EntitySet<Notify>(new Action<Notify>(this.attach_Notify), new Action<Notify>(this.detach_Notify));
			this._EntryModifiedHistory = new EntitySet<EntryModifiedHistory>(new Action<EntryModifiedHistory>(this.attach_EntryModifiedHistory), new Action<EntryModifiedHistory>(this.detach_EntryModifiedHistory));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Int NOT NULL")]
		public int Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Province
		{
			get
			{
				return this._Province;
			}
			set
			{
				if ((this._Province != value))
				{
					this.OnProvinceChanging(value);
					this.SendPropertyChanging();
					this._Province = value;
					this.SendPropertyChanged("Province");
					this.OnProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthdate", DbType="DateTime NOT NULL")]
		public System.DateTime Birthdate
		{
			get
			{
				return this._Birthdate;
			}
			set
			{
				if ((this._Birthdate != value))
				{
					this.OnBirthdateChanging(value);
					this.SendPropertyChanging();
					this._Birthdate = value;
					this.SendPropertyChanged("Birthdate");
					this.OnBirthdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int")]
		public System.Nullable<int> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IllegalCounts", DbType="Int")]
		public System.Nullable<int> IllegalCounts
		{
			get
			{
				return this._IllegalCounts;
			}
			set
			{
				if ((this._IllegalCounts != value))
				{
					this.OnIllegalCountsChanging(value);
					this.SendPropertyChanging();
					this._IllegalCounts = value;
					this.SendPropertyChanged("IllegalCounts");
					this.OnIllegalCountsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActivated", DbType="TinyInt NOT NULL")]
		public byte IsActivated
		{
			get
			{
				return this._IsActivated;
			}
			set
			{
				if ((this._IsActivated != value))
				{
					this.OnIsActivatedChanging(value);
					this.SendPropertyChanging();
					this._IsActivated = value;
					this.SendPropertyChanged("IsActivated");
					this.OnIsActivatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordErrorCounts", DbType="Int NOT NULL")]
		public int PasswordErrorCounts
		{
			get
			{
				return this._PasswordErrorCounts;
			}
			set
			{
				if ((this._PasswordErrorCounts != value))
				{
					this.OnPasswordErrorCountsChanging(value);
					this.SendPropertyChanging();
					this._PasswordErrorCounts = value;
					this.SendPropertyChanged("PasswordErrorCounts");
					this.OnPasswordErrorCountsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FrozenTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> FrozenTime
		{
			get
			{
				return this._FrozenTime;
			}
			set
			{
				if ((this._FrozenTime != value))
				{
					this.OnFrozenTimeChanging(value);
					this.SendPropertyChanging();
					this._FrozenTime = value;
					this.SendPropertyChanged("FrozenTime");
					this.OnFrozenTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUrl", DbType="VarChar(64)")]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkilledField", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string SkilledField
		{
			get
			{
				return this._SkilledField;
			}
			set
			{
				if ((this._SkilledField != value))
				{
					this.OnSkilledFieldChanging(value);
					this.SendPropertyChanging();
					this._SkilledField = value;
					this.SendPropertyChanged("SkilledField");
					this.OnSkilledFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(64)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Comment", Storage="_Comment", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Comment> Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				this._Comment.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Entry", Storage="_Entry", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Entry> Entry
		{
			get
			{
				return this._Entry;
			}
			set
			{
				this._Entry.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_EntryToBeVerified", Storage="_EntryToBeVerified", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<EntryToBeVerified> EntryToBeVerified
		{
			get
			{
				return this._EntryToBeVerified;
			}
			set
			{
				this._EntryToBeVerified.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Evaluation", Storage="_Evaluation", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Evaluation> Evaluation
		{
			get
			{
				return this._Evaluation;
			}
			set
			{
				this._Evaluation.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Notify", Storage="_Notify", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Notify> Notify
		{
			get
			{
				return this._Notify;
			}
			set
			{
				this._Notify.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_EntryModifiedHistory", Storage="_EntryModifiedHistory", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<EntryModifiedHistory> EntryModifiedHistory
		{
			get
			{
				return this._EntryModifiedHistory;
			}
			set
			{
				this._EntryModifiedHistory.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comment(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Comment(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Entry(Entry entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Entry(Entry entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_EntryToBeVerified(EntryToBeVerified entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_EntryToBeVerified(EntryToBeVerified entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Evaluation(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Evaluation(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Notify(Notify entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Notify(Notify entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_EntryModifiedHistory(EntryModifiedHistory entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_EntryModifiedHistory(EntryModifiedHistory entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Message")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageID;
		
		private string _Sender;
		
		private string _Receiver;
		
		private System.DateTime _SendTime;
		
		private string _Contents;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIDChanging(int value);
    partial void OnMessageIDChanged();
    partial void OnSenderChanging(string value);
    partial void OnSenderChanged();
    partial void OnReceiverChanging(string value);
    partial void OnReceiverChanged();
    partial void OnSendTimeChanging(System.DateTime value);
    partial void OnSendTimeChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    #endregion
		
		public Message()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sender", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Sender
		{
			get
			{
				return this._Sender;
			}
			set
			{
				if ((this._Sender != value))
				{
					this.OnSenderChanging(value);
					this.SendPropertyChanging();
					this._Sender = value;
					this.SendPropertyChanged("Sender");
					this.OnSenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Receiver", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Receiver
		{
			get
			{
				return this._Receiver;
			}
			set
			{
				if ((this._Receiver != value))
				{
					this.OnReceiverChanging(value);
					this.SendPropertyChanging();
					this._Receiver = value;
					this.SendPropertyChanged("Receiver");
					this.OnReceiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendTime", DbType="DateTime NOT NULL")]
		public System.DateTime SendTime
		{
			get
			{
				return this._SendTime;
			}
			set
			{
				if ((this._SendTime != value))
				{
					this.OnSendTimeChanging(value);
					this.SendPropertyChanging();
					this._SendTime = value;
					this.SendPropertyChanged("SendTime");
					this.OnSendTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contents", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntryModifiedHistory")]
	public partial class EntryModifiedHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HistoryID;
		
		private int _EntryID;
		
		private int _UserID;
		
		private EntityRef<Entry> _Entry;
		
		private EntityRef<Users> _Users;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHistoryIDChanging(int value);
    partial void OnHistoryIDChanged();
    partial void OnEntryIDChanging(int value);
    partial void OnEntryIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public EntryModifiedHistory()
		{
			this._Entry = default(EntityRef<Entry>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HistoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int HistoryID
		{
			get
			{
				return this._HistoryID;
			}
			set
			{
				if ((this._HistoryID != value))
				{
					this.OnHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._HistoryID = value;
					this.SendPropertyChanged("HistoryID");
					this.OnHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryID", DbType="Int NOT NULL")]
		public int EntryID
		{
			get
			{
				return this._EntryID;
			}
			set
			{
				if ((this._EntryID != value))
				{
					if (this._Entry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntryIDChanging(value);
					this.SendPropertyChanging();
					this._EntryID = value;
					this.SendPropertyChanged("EntryID");
					this.OnEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_EntryModifiedHistory", Storage="_Entry", ThisKey="EntryID", OtherKey="EntryID", IsForeignKey=true)]
		public Entry Entry
		{
			get
			{
				return this._Entry.Entity;
			}
			set
			{
				Entry previousValue = this._Entry.Entity;
				if (((previousValue != value) 
							|| (this._Entry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entry.Entity = null;
						previousValue.EntryModifiedHistory.Remove(this);
					}
					this._Entry.Entity = value;
					if ((value != null))
					{
						value.EntryModifiedHistory.Add(this);
						this._EntryID = value.EntryID;
					}
					else
					{
						this._EntryID = default(int);
					}
					this.SendPropertyChanged("Entry");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_EntryModifiedHistory", Storage="_Users", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.EntryModifiedHistory.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.EntryModifiedHistory.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
